import networkx as nx
import matplotlib.pyplot as plt

# Create a synthetic social graph
G = nx.erdos_renyi_graph(n=10, p=0.3, seed=42)

# Calculate centrality measures
degree_centrality = nx.degree_centrality(G)
closeness_centrality = nx.closeness_centrality(G)
eigenvector_centrality = nx.eigenvector_centrality(G)

# Display centrality values
print("Node\tDegree\tCloseness\tEigenvector")
for node in G.nodes():
    print(f"{node}\t{degree_centrality[node]:.2f}\t{closeness_centrality[node]:.2f}\t{eigenvector_centrality[node]:.2f}")

# Optional: visualize with node size by degree
plt.figure(figsize=(8,6))
pos = nx.spring_layout(G, seed=42)
node_size = [5000 * degree_centrality[n] for n in G.nodes()]
nx.draw(G, pos, with_labels=True, node_size=node_size, node_color='skyblue', edge_color='gray')
plt.title("Social Graph Visualization (Node Size = Degree Centrality)")
plt.show()
